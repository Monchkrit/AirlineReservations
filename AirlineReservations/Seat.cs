//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Linq;

namespace AirlineReservations
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;

    public partial class Seat
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Seat()
        {
            this.Passengers = new HashSet<Passenger>();
        }
    
        public int SeatID { get; set; }
        public short SeatRow { get; set; }
        public string SeatColumn { get; set; }
        public bool IsTaken { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Passenger> Passengers { get; set; }

        //check if the plane is full (used to place passenger on waiting list)
        public bool IsPlaneFull()
        {
            using (AirlineEntities context = new AirlineEntities())
            {
                var isFull = (from s in context.Seats
                              where s.IsTaken == false
                              select s).Count();
                if (isFull > 0)
                    return false;
            }
            return true;
        }
        //check if seat is already taken
        public bool IsSeatTaken(int SeatID)
        {
            using (AirlineEntities context = new AirlineEntities())
            {
                //var seat = context.Database.ExecuteSqlCommand("SELECT * FROM seats WHERE SeatRow = @SeatRow and SeatColumn = @SeatColumn" +
                //    "AND IsTaken = false");
                var seat = context.Seats.Find(SeatID);

                if (seat.IsTaken == true)
                    return false;
                else
                    return true;
            }
        }
    }
}
